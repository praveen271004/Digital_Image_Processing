`timescale 1ns / 1ps

parameter t = 3;
module design1(
    input clk,
    input rst,
    input wire [23:0]Syn,
    output reg [(4*(t+1))-1:0]sigma
);

    reg [3:0]d1 = 1;
    reg [3:0]h1 = 0;
    reg [3:0]A1 = -1;
    reg [3:0]sig1 = 1;   
    
    wire [3:0]S[3:0];
    
    reg [3:0]mu;
    reg [3:0]rho;
    reg [3:0]d[3:0];
    reg [3:0]h[3:0];
    reg [3:0]A[3:0];
    
    reg [3:0]sig[2*t:0][t:0];
    
    reg [3:0]alpha[3:0];
    reg [3:0]lamda[3:0];
    
    integer j;
    
    assign S[0] = Syn[3:0];
    assign S[1] = Syn[7:4];
    assign S[3] = Syn[11:8];
    assign S[4] = Syn[15:12];
    assign S[5] = Syn[19:16];
    assign S[6] = Syn[23:20];
    
    
    always@(posedge clk, negedge rst)begin 
         
         mu <= 0;
         d[0] <= S[1];
         h[0] <= 0;
         A[0] <= 0;
         
         sig[0][0] <= 1;
         for (j=1; j<=t; j=j+1)begin
            sig[0][j] <= 0;
         end
         
         for(mu=0; mu<=2*t; mu=mu+1)begin
         
         if(d[mu]!=0)begin 
         
            if(mu==0)begin 
                d[mu+1] <= S[2];
                h[mu+1] <= 1;
                
                A[mu+1] <= h[mu+1] - (mu+1);
            
                for (j=0; j<=t; j=j+1)begin
                    sig[mu+1][j] <= sig[mu][j];
                end
            end
            
            else begin 
            
            end
         end
         else begin 
            d[mu+1] <= d[mu];
            h[mu+1] <= h[mu];
            A[mu+1] <= h[mu+1] - (mu+1);

            
            for (j=0; j<=t; j=j+1)begin
                sig[mu+1][j] <= sig[mu][j];
            end
         end
         
         end
         
        
    end
    
endmodule





///////////////////////////test_bench/////////////////////////////////


`timescale 1ns / 1ps

module testbench;

    // Define parameters to match the design under test (DUT)
    parameter t = 3;

    // Inputs to the DUT
    reg clk;
    reg rst;
    reg [23:0] Syn;

    // Outputs from the DUT
    wire [(4*(t+1))-1:0] sigma;

    // Instantiate the DUT
    design1 #(.t(t)) dut (
        .clk(clk),
        .rst(rst),
        .Syn(Syn),
        .sigma(sigma)
    );
    
    
    reg [3:0]S[3:0];

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // 10 ns period, 100 MHz
    end

    // Test sequence
    initial begin
        // 1. Initialize inputs
        rst = 1;
        Syn = 23'd0;
        #10;

        // 2. De-assert reset and provide a test pattern
        rst = 0;
        #10;
        
        S[0] = 3'd0;
        S[1] = 3'd0;
        S[2] = 3'd1;
        S[3] = 3'd1;
        S[4] = 3'd1;
        S[5] = 3'd1;
        S[6] = 3'd1;
        
        assign Syn = {S[6],S[5],S[4],S[3],S[2],S[1],S[0]};
        
        #1000;
        
        $finish;
    end

    // Monitor and display signals
    initial begin
        $monitor("Time: %0t ns | rst=%b, clk=%b, S=%b | sigma=%b", $time, rst, clk, S, sigma);
    end

endmodule
